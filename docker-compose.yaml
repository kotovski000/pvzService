services:
  pvz-service:
    build: .
    container_name: pvz-shop-service
    ports:
      - "8080:8080"
      - "9000:9000"
      - "3000:3000"
    environment:
      # енвы подключения к БД
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_HOST=${DATABASE_HOST}
      - JWT_SECRET=${JWT_SECRET}
      # порт сервиса
      - SERVER_PORT=${SERVER_PORT}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal

  db:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      # "./migrations/init.sql" - путь к миграциям БД
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DATABASE_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d $${POSTGRES_DB}'"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - internal
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - pvz-service
    networks:
      - internal
networks:
  internal:
